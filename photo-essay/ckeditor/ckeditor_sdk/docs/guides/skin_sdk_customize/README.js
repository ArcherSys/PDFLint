Ext.data.JsonP.skin_sdk_customize({"guide":"<!--\nCopyright (c) 2003-2015, CKSource - Frederico Knabben. All rights reserved.\nFor licensing, see LICENSE.md.\n-->\n\n\n<h1 id='skin_sdk_customize-section-bringing-your-skin-to-life'>Bringing Your Skin to Life</h1>\n\n<p>At this stage you have a started a skin that is eventually identical to the\nexisting one you have chosen. Now it is time to bring your ideas to life, by\nmaking changes to the skin files.</p>\n\n<p>The bad part of basing your work on an existing skin is the tendency of making\nboth skins too similar. Or to reuse many of the solutions proposed on the base\nskin. Because of this, try to see your skin with different eyes and keep in mind\nthat you can change it drastically if you want, having something that has\nnothing to do with the original skin.</p>\n\n<p>To start, it is recommended opening all files in the skin folder and\nunderstanding their scope and contents. The Kama skin is fully documented, so\nits files are the best learning resources for in-depth technical aspects.</p>\n\n<p>Skin developers have powerful tools available, which make it easy to work on CSS\nfiles. The most important tool is the \"elements inspector\", available in\napplications like <a href=\"http://getfirebug.com/\">Firebug</a> (for Firefox),\n<a href=\"http://www.opera.com/dragonfly/\">Opera Dragonfly</a> or the\n<a href=\"https://developers.google.com/chrome-developer-tools/\">Google Chrome Developer Tools</a>.\nWith these tools you can change or add CSS style rules to elements and see the\nresults on the fly. Then just port the changes to the CSS files. We strongly\nrecommend this approach.</p>\n","title":"Customize","meta_description":"How to customize a CKEditor skin.","meta_keywords":"ckeditor, editor, wysiwyg, skin, skins, tutorial, sample, sdk, example, development, customize, customization, customise, customisation"});